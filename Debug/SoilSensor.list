
SoilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  080032ac  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000039c  20000010  080032b8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200003ac  080032b8  000203ac  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014afd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000030c8  00000000  00000000  00034b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001590  00000000  00000000  00037c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001428  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021c08  00000000  00000000  0003a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013d90  00000000  00000000  0005c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d1f09  00000000  00000000  0006ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00141e61  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005868  00000000  00000000  00141eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080031e0 	.word	0x080031e0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080031e0 	.word	0x080031e0

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <MX_GPIO_Init>:
     PA1   ------> ADCx_IN6
     PA2   ------> ADCx_IN7
     PA3   ------> ADCx_IN8
*/
void MX_GPIO_Init(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c4:	2004      	movs	r0, #4
 80001c6:	f7ff ffd9 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ca:	2002      	movs	r0, #2
 80001cc:	f7ff ffd6 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d0:	2001      	movs	r0, #1
 80001d2:	f7ff ffd3 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|SOIL_T_3_Pin|SOIL_T_4_Pin|SOIL_T_1_Pin, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80001dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e0:	f000 feca 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 7108 	mov.w	r1, #544	; 0x220
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 fec3 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOIL_T_5_Pin|LD2_Pin|LD3_Pin|SOIL_T_2_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2147      	movs	r1, #71	; 0x47
 80001f6:	481e      	ldr	r0, [pc, #120]	; (8000270 <MX_GPIO_Init+0xc0>)
 80001f8:	f000 febe 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SOIL_M_1_Pin|SOIL_M_2_Pin|SOIL_M_3_Pin|SOIL_M_4_Pin;
 80001fc:	230f      	movs	r3, #15
 80001fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000200:	2303      	movs	r3, #3
 8000202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4619      	mov	r1, r3
 800020c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000210:	f000 fd42 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LD1_Pin|GREEN_LED_Pin|SOIL_T_3_Pin|SOIL_T_4_Pin
 8000214:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000218:	607b      	str	r3, [r7, #4]
                          |SOIL_T_1_Pin|RED_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4619      	mov	r1, r3
 800022a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022e:	f000 fd33 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SOIL_T_5_Pin|LD2_Pin|LD3_Pin|SOIL_T_2_Pin;
 8000232:	2347      	movs	r3, #71	; 0x47
 8000234:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000236:	2301      	movs	r3, #1
 8000238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023e:	2300      	movs	r3, #0
 8000240:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4619      	mov	r1, r3
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <MX_GPIO_Init+0xc0>)
 8000248:	f000 fd26 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800024c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000262:	f000 fd19 	bl	8000c98 <HAL_GPIO_Init>

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	48000400 	.word	0x48000400

08000274 <LL_AHB2_GRP1_EnableClock>:
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800027c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4313      	orrs	r3, r2
 800028a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800028c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4013      	ands	r3, r2
 8000296:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000298:	68fb      	ldr	r3, [r7, #12]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr

080002a6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b085      	sub	sp, #20
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80002ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80002b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4313      	orrs	r3, r2
 80002bc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80002be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4013      	ands	r3, r2
 80002c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002ca:	68fb      	ldr	r3, [r7, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <MX_I2C1_Init+0x74>)
 8000314:	f000 fe86 	bl	8001024 <HAL_I2C_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 f98f 	bl	8000640 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <MX_I2C1_Init+0x74>)
 8000326:	f000 ff0c 	bl	8001142 <HAL_I2CEx_ConfigAnalogFilter>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f986 	bl	8000640 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	2100      	movs	r1, #0
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_I2C1_Init+0x74>)
 8000338:	f000 ff4e 	bl	80011d8 <HAL_I2CEx_ConfigDigitalFilter>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f97d 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000002c 	.word	0x2000002c
 8000350:	40005400 	.word	0x40005400
 8000354:	00707cbb 	.word	0x00707cbb

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <HAL_I2C_MspInit+0x5c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d117      	bne.n	80003aa <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800037a:	2002      	movs	r0, #2
 800037c:	f7ff ff7a 	bl	8000274 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000384:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000386:	2312      	movs	r3, #18
 8000388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000392:	2304      	movs	r3, #4
 8000394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	4619      	mov	r1, r3
 800039c:	4806      	ldr	r0, [pc, #24]	; (80003b8 <HAL_I2C_MspInit+0x60>)
 800039e:	f000 fc7b 	bl	8000c98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003a6:	f7ff ff7e 	bl	80002a6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40005400 	.word	0x40005400
 80003b8:	48000400 	.word	0x48000400

080003bc <LL_AHB3_GRP1_EnableClock>:
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4013      	ands	r3, r2
 80003de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003e0:	68fb      	ldr	r3, [r7, #12]
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_IPCC_Init+0x20>)
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <MX_IPCC_Init+0x24>)
 80003f8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_IPCC_Init+0x20>)
 80003fc:	f000 ff38 	bl	8001270 <HAL_IPCC_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000406:	f000 f91b 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000078 	.word	0x20000078
 8000414:	58000c00 	.word	0x58000c00

08000418 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a05      	ldr	r2, [pc, #20]	; (800043c <HAL_IPCC_MspInit+0x24>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d103      	bne.n	8000432 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800042a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800042e:	f7ff ffc5 	bl	80003bc <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	58000c00 	.word	0x58000c00

08000440 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000450:	f023 0218 	bic.w	r2, r3, #24
 8000454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4313      	orrs	r3, r2
 800045c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000470:	f000 fa58 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000474:	f000 f83c 	bl	80004f0 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000478:	f7ff ffba 	bl	80003f0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047c:	f7ff fe98 	bl	80001b0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000480:	f000 f9c0 	bl	8000804 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000484:	f7ff ff28 	bl	80002d8 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2120      	movs	r1, #32
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 fd72 	bl	8000f78 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000498:	f000 faca 	bl	8000a30 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a6:	f000 fd67 	bl	8000f78 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80004aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ae:	f000 fabf 	bl	8000a30 <HAL_Delay>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ba:	f000 fd5d 	bl	8000f78 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80004be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c2:	f000 fab5 	bl	8000a30 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f000 fd52 	bl	8000f78 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80004d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d8:	f000 faaa 	bl	8000a30 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_Pin, RED_LED_GPIO_Port);
 80004dc:	2100      	movs	r1, #0
 80004de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004e2:	f000 fd61 	bl	8000fa8 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(GREEN_LED_Pin, GREEN_LED_GPIO_Port);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2020      	movs	r0, #32
 80004ea:	f000 fd5d 	bl	8000fa8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80004ee:	e7cb      	b.n	8000488 <main+0x1c>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0ae      	sub	sp, #184	; 0xb8
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004fa:	2248      	movs	r2, #72	; 0x48
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fe66 	bl	80031d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]
 8000516:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2250      	movs	r2, #80	; 0x50
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fe56 	bl	80031d0 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800052e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000532:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	f023 0303 	bic.w	r3, r3, #3
 800053e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000548:	f001 f828 	bl	800159c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff77 	bl	8000440 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000552:	4b3a      	ldr	r3, [pc, #232]	; (800063c <SystemClock_Config+0x14c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800055a:	4a38      	ldr	r2, [pc, #224]	; (800063c <SystemClock_Config+0x14c>)
 800055c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <SystemClock_Config+0x14c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800056e:	2327      	movs	r3, #39	; 0x27
 8000570:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000576:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000580:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2340      	movs	r3, #64	; 0x40
 800058a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800058e:	2300      	movs	r3, #0
 8000590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000594:	2360      	movs	r3, #96	; 0x60
 8000596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fb75 	bl	8001c94 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f846 	bl	8000640 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005b4:	236f      	movs	r3, #111	; 0x6f
 80005b6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005b8:	2302      	movs	r3, #2
 80005ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fee8 	bl	80023ac <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80005e2:	f000 f82d 	bl	8000640 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_I2C1
 80005e6:	f242 1304 	movw	r3, #8452	; 0x2104
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80005ec:	2318      	movs	r3, #24
 80005ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80005f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80005f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005fa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80005fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000600:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000606:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000608:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800060e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000618:	2300      	movs	r3, #0
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fae8 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800062a:	f000 f809 	bl	8000640 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800062e:	f002 fc57 	bl	8002ee0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000632:	bf00      	nop
 8000634:	37b8      	adds	r7, #184	; 0xb8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	58000400 	.word	0x58000400

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>

0800064a <LL_AHB3_GRP1_EnableClock>:
{
 800064a:	b480      	push	{r7}
 800064c:	b085      	sub	sp, #20
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4313      	orrs	r3, r2
 8000660:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4013      	ands	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000680:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000684:	f7ff ffe1 	bl	800064a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	202e      	movs	r0, #46	; 0x2e
 800068e:	f000 face 	bl	8000c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000692:	202e      	movs	r0, #46	; 0x2e
 8000694:	f000 fae5 	bl	8000c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f976 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80006f4:	f000 fc72 	bl	8000fdc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <SystemInit+0x98>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <SystemInit+0x98>)
 8000708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000724:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000728:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800072a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x9c>)
 8000736:	4013      	ands	r3, r2
 8000738:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800073a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000746:	f023 0305 	bic.w	r3, r3, #5
 800074a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800074e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000766:	4a0d      	ldr	r2, [pc, #52]	; (800079c <SystemInit+0xa0>)
 8000768:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800076a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <SystemInit+0xa0>)
 8000770:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800077c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000780:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	faf6fefb 	.word	0xfaf6fefb
 800079c:	22041000 	.word	0x22041000

080007a0 <LL_AHB2_GRP1_EnableClock>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c4:	68fb      	ldr	r3, [r7, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <LL_APB1_GRP1_EnableClock>:
{
 80007d2:	b480      	push	{r7}
 80007d4:	b085      	sub	sp, #20
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4013      	ands	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_USB_PCD_Init+0x48>)
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MX_USB_PCD_Init+0x4c>)
 800080c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USB_PCD_Init+0x48>)
 8000810:	2208      	movs	r2, #8
 8000812:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_USB_PCD_Init+0x48>)
 8000816:	2202      	movs	r2, #2
 8000818:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USB_PCD_Init+0x48>)
 800081c:	2202      	movs	r2, #2
 800081e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_USB_PCD_Init+0x48>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USB_PCD_Init+0x48>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_USB_PCD_Init+0x48>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USB_PCD_Init+0x48>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_USB_PCD_Init+0x48>)
 800083a:	f000 fd9f 	bl	800137c <HAL_PCD_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000844:	f7ff fefc 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000b4 	.word	0x200000b4
 8000850:	40006800 	.word	0x40006800

08000854 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_PCD_MspInit+0x5c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d118      	bne.n	80008a8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff ff92 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800087c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000880:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800088e:	230a      	movs	r3, #10
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 f9fc 	bl	8000c98 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008a0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80008a4:	f7ff ff95 	bl	80007d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40006800 	.word	0x40006800

080008b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80008b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b8:	3304      	adds	r3, #4

080008ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80008be:	d3f9      	bcc.n	80008b4 <CopyDataInit>
  bx lr
 80008c0:	4770      	bx	lr

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80008c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80008c4:	3004      	adds	r0, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80008c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>
  bx lr
 80008ca:	4770      	bx	lr

080008cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80008ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d0:	f7ff ff14 	bl	80006fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <LoopForever+0x8>)
 80008d6:	490c      	ldr	r1, [pc, #48]	; (8000908 <LoopForever+0xc>)
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <LoopForever+0x10>)
 80008da:	2300      	movs	r3, #0
 80008dc:	f7ff ffed 	bl	80008ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopForever+0x14>)
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <LoopForever+0x18>)
 80008e4:	2300      	movs	r3, #0
 80008e6:	f7ff ffee 	bl	80008c6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <LoopForever+0x1c>)
 80008ec:	490b      	ldr	r1, [pc, #44]	; (800091c <LoopForever+0x20>)
 80008ee:	2300      	movs	r3, #0
 80008f0:	f7ff ffe9 	bl	80008c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f4:	f002 fc48 	bl	8003188 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80008f8:	f7ff fdb8 	bl	800046c <main>

080008fc <LoopForever>:

LoopForever:
  b LoopForever
 80008fc:	e7fe      	b.n	80008fc <LoopForever>
 80008fe:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000900:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000904:	20000004 	.word	0x20000004
 8000908:	20000010 	.word	0x20000010
 800090c:	080032ac 	.word	0x080032ac
  INIT_BSS _sbss, _ebss
 8000910:	20000010 	.word	0x20000010
 8000914:	200003ac 	.word	0x200003ac
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000918:	20030000 	.word	0x20030000
 800091c:	20030000 	.word	0x20030000

08000920 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_Init+0x3c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_Init+0x3c>)
 8000934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000938:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093a:	2003      	movs	r0, #3
 800093c:	f000 f96c 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f80f 	bl	8000964 <HAL_InitTick>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	e001      	b.n	8000956 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000952:	f7ff fe93 	bl	800067c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000956:	79fb      	ldrb	r3, [r7, #7]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	58004000 	.word	0x58004000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d024      	beq.n	80009c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	f001 fec4 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800097c:	4602      	mov	r2, r0
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x6c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	fbb3 f3f1 	udiv	r3, r3, r1
 800098c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f974 	bl	8000c7e <HAL_SYSTICK_Config>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10f      	bne.n	80009bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d809      	bhi.n	80009b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a2:	2200      	movs	r2, #0
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	f04f 30ff 	mov.w	r0, #4294967295
 80009aa:	f000 f940 	bl	8000c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_InitTick+0x70>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	e007      	b.n	80009c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e004      	b.n	80009c6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e001      	b.n	80009c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000000c 	.word	0x2000000c
 80009d4:	20000008 	.word	0x20000008

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c
 80009fc:	200003a8 	.word	0x200003a8

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200003a8 	.word	0x200003a8

08000a18 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTickPrio+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffe2 	bl	8000a00 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffd2 	bl	8000a00 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
    {
    }
  }
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000000c 	.word	0x2000000c

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff29 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff40 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff33 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa4 	bl	8000bd4 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e14c      	b.n	8000f42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 813e 	beq.w	8000f3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d00b      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd4:	2b11      	cmp	r3, #17
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b12      	cmp	r3, #18
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0xea>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d123      	bne.n	8000dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	6939      	ldr	r1, [r7, #16]
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0203 	and.w	r2, r3, #3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8098 	beq.w	8000f3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e0c:	4a54      	ldr	r2, [pc, #336]	; (8000f60 <HAL_GPIO_Init+0x2c8>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e36:	d019      	beq.n	8000e6c <HAL_GPIO_Init+0x1d4>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1d0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1cc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1c8>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1c4>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	e008      	b.n	8000e6e <HAL_GPIO_Init+0x1d6>
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x1d6>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e004      	b.n	8000e6e <HAL_GPIO_Init+0x1d6>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_Init+0x1d6>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_GPIO_Init+0x1d6>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7e:	4938      	ldr	r1, [pc, #224]	; (8000f60 <HAL_GPIO_Init+0x2c8>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb2:	4a30      	ldr	r2, [pc, #192]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee0:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f47f aeab 	bne.w	8000ca8 <HAL_GPIO_Init+0x10>
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40010000 	.word	0x40010000
 8000f64:	48000400 	.word	0x48000400
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	48000c00 	.word	0x48000c00
 8000f70:	48001000 	.word	0x48001000
 8000f74:	58000800 	.word	0x58000800

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43d9      	mvns	r1, r3
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	400b      	ands	r3, r1
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_HSEM_IRQHandler+0x30>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_HSEM_IRQHandler+0x30>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <HAL_HSEM_IRQHandler+0x30>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_HSEM_IRQHandler+0x30>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f807 	bl	8001010 <HAL_HSEM_FreeCallback>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58001500 	.word	0x58001500

08001010 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e081      	b.n	800113a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f984 	bl	8000358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d107      	bne.n	800109e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	e006      	b.n	80010ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d104      	bne.n	80010be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	ea42 0103 	orr.w	r1, r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	021a      	lsls	r2, r3, #8
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69d9      	ldr	r1, [r3, #28]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2220      	movs	r2, #32
 8001126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b20      	cmp	r3, #32
 8001156:	d138      	bne.n	80011ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001162:	2302      	movs	r3, #2
 8001164:	e032      	b.n	80011cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2224      	movs	r2, #36	; 0x24
 8001172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0201 	bic.w	r2, r2, #1
 8001184:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001194:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
  }
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d139      	bne.n	8001262 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e033      	b.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	; 0x24
 8001208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800122a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001262:	2302      	movs	r3, #2
  }
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01e      	beq.n	80012c0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_IPCC_Init+0x60>)
 8001284:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f8c0 	bl	8000418 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f000 f85b 	bl	8001354 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f82c 	bl	8001308 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80012be:	e001      	b.n	80012c4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	58000c00 	.word	0x58000c00

080012d4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e00f      	b.n	8001336 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <IPCC_SetDefaultCallbacks+0x44>)
 8001320:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3306      	adds	r3, #6
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <IPCC_SetDefaultCallbacks+0x48>)
 800132e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b05      	cmp	r3, #5
 800133a:	d9ec      	bls.n	8001316 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	080012d5 	.word	0x080012d5
 8001350:	080012ef 	.word	0x080012ef

08001354 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001368:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	609a      	str	r2, [r3, #8]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b08b      	sub	sp, #44	; 0x2c
 8001380:	af06      	add	r7, sp, #24
 8001382:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0d7      	b.n	800153e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fa56 	bl	8000854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 feaa 	bl	800310e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e04c      	b.n	800145a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	3301      	adds	r3, #1
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	b298      	uxth	r0, r3
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3336      	adds	r3, #54	; 0x36
 80013fe:	4602      	mov	r2, r0
 8001400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3303      	adds	r3, #3
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	3338      	adds	r3, #56	; 0x38
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	333c      	adds	r3, #60	; 0x3c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3340      	adds	r3, #64	; 0x40
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	3301      	adds	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3ad      	bcc.n	80013c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e044      	b.n	80014f4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	f203 1369 	addw	r3, r3, #361	; 0x169
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	3301      	adds	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3b5      	bcc.n	800146a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	687e      	ldr	r6, [r7, #4]
 8001506:	466d      	mov	r5, sp
 8001508:	f106 0410 	add.w	r4, r6, #16
 800150c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	1d33      	adds	r3, r6, #4
 8001516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f001 fe13 	bl	8003144 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d102      	bne.n	800153c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f805 	bl	8001546 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001546 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800156a:	b29b      	uxth	r3, r3
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800157e:	b29b      	uxth	r3, r3
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	58000400 	.word	0x58000400

080015bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	58000400 	.word	0x58000400

080015d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015ea:	d101      	bne.n	80015f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_RCC_HSE_Enable>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_RCC_HSE_Disable>:
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_RCC_HSE_IsReady>:
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800164a:	d101      	bne.n	8001650 <LL_RCC_HSE_IsReady+0x18>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <LL_RCC_HSE_IsReady+0x1a>
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_RCC_HSI_Enable>:
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_RCC_HSI_Disable>:
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_RCC_HSI_IsReady>:
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016aa:	d101      	bne.n	80016b0 <LL_RCC_HSI_IsReady+0x18>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LL_RCC_HSI_IsReady+0x1a>
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_RCC_HSI_SetCalibTrimming>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_RCC_HSI48_Enable>:
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_RCC_HSI48_Disable>:
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_RCC_HSI48_IsReady>:
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d101      	bne.n	8001742 <LL_RCC_HSI48_IsReady+0x18>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_RCC_HSI48_IsReady+0x1a>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RCC_LSE_Enable>:
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_RCC_LSE_Disable>:
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_RCC_LSE_EnableBypass>:
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_LSE_DisableBypass>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d101      	bne.n	80017ee <LL_RCC_LSE_IsReady+0x18>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_RCC_LSE_IsReady+0x1a>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d101      	bne.n	8001856 <LL_RCC_LSI1_IsReady+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_RCC_LSI1_IsReady+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d101      	bne.n	80018be <LL_RCC_LSI2_IsReady+0x18>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_RCC_LSI2_IsReady+0x1a>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6013      	str	r3, [r2, #0]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b02      	cmp	r3, #2
 8001944:	d101      	bne.n	800194a <LL_RCC_MSI_IsReady+0x16>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_RCC_MSI_IsReady+0x18>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2bb0      	cmp	r3, #176	; 0xb0
 8001994:	d901      	bls.n	800199a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001996:	23b0      	movs	r3, #176	; 0xb0
 8001998:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800199a:	687b      	ldr	r3, [r7, #4]
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 0203 	bic.w	r2, r3, #3
 80019e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a76:	f023 020f 	bic.w	r2, r3, #15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b66:	d101      	bne.n	8001b6c <LL_RCC_PLL_IsReady+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_RCC_PLL_IsReady+0x1a>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d101      	bne.n	8001bf2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c12:	d101      	bne.n	8001c18 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d101      	bne.n	8001c3e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c5c:	d101      	bne.n	8001c62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c80:	d101      	bne.n	8001c86 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08d      	sub	sp, #52	; 0x34
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e37e      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8092 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb4:	f7ff fea1 	bl	80019fa <LL_RCC_GetSysClkSource>
 8001cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cba:	f7ff ff82 	bl	8001bc2 <LL_RCC_PLL_GetMainSource>
 8001cbe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3e>
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d14c      	bne.n	8001d66 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d149      	bne.n	8001d66 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd2:	f7ff fe2f 	bl	8001934 <LL_RCC_MSI_IsReady>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x54>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e35d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001cec:	f7ff fe47 	bl	800197e <LL_RCC_MSI_GetRange>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	429c      	cmp	r4, r3
 8001cf4:	d914      	bls.n	8001d20 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fd16 	bl	800272c <RCC_SetFlashLatencyFromMSIRange>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e34c      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe21 	bl	8001956 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe45 	bl	80019a8 <LL_RCC_MSI_SetCalibTrimming>
 8001d1e:	e013      	b.n	8001d48 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fe16 	bl	8001956 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe3a 	bl	80019a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fcf7 	bl	800272c <RCC_SetFlashLatencyFromMSIRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e32d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d48:	f000 fcdc 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4ab3      	ldr	r2, [pc, #716]	; (800201c <HAL_RCC_OscConfig+0x388>)
 8001d50:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d52:	4bb3      	ldr	r3, [pc, #716]	; (8002020 <HAL_RCC_OscConfig+0x38c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fe04 	bl	8000964 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d039      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e31e      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01e      	beq.n	8001dac <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d6e:	f7ff fdc3 	bl	80018f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fe45 	bl	8000a00 <HAL_GetTick>
 8001d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d7a:	f7fe fe41 	bl	8000a00 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e30b      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d8c:	f7ff fdd2 	bl	8001934 <LL_RCC_MSI_IsReady>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f1      	beq.n	8001d7a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fddb 	bl	8001956 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fdff 	bl	80019a8 <LL_RCC_MSI_SetCalibTrimming>
 8001daa:	e015      	b.n	8001dd8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dac:	f7ff fdb3 	bl	8001916 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fe26 	bl	8000a00 <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db8:	f7fe fe22 	bl	8000a00 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e2ec      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001dca:	f7ff fdb3 	bl	8001934 <LL_RCC_MSI_IsReady>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f1      	bne.n	8001db8 <HAL_RCC_OscConfig+0x124>
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d04e      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de4:	f7ff fe09 	bl	80019fa <LL_RCC_GetSysClkSource>
 8001de8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dea:	f7ff feea 	bl	8001bc2 <LL_RCC_PLL_GetMainSource>
 8001dee:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x16e>
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d10a      	bne.n	8001e18 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	f7ff fc19 	bl	8001638 <LL_RCC_HSE_IsReady>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d039      	beq.n	8001e80 <HAL_RCC_OscConfig+0x1ec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d135      	bne.n	8001e80 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e2c5      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0x194>
 8001e22:	f7ff fbeb 	bl	80015fc <LL_RCC_HSE_Enable>
 8001e26:	e001      	b.n	8001e2c <HAL_RCC_OscConfig+0x198>
 8001e28:	f7ff fbf7 	bl	800161a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d012      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fde4 	bl	8000a00 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7fe fde0 	bl	8000a00 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e2aa      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e4e:	f7ff fbf3 	bl	8001638 <LL_RCC_HSE_IsReady>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f1      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1a8>
 8001e58:	e013      	b.n	8001e82 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fdd1 	bl	8000a00 <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e62:	f7fe fdcd 	bl	8000a00 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e297      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e74:	f7ff fbe0 	bl	8001638 <LL_RCC_HSE_IsReady>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f1      	bne.n	8001e62 <HAL_RCC_OscConfig+0x1ce>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d051      	beq.n	8001f32 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	f7ff fdb4 	bl	80019fa <LL_RCC_GetSysClkSource>
 8001e92:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e94:	f7ff fe95 	bl	8001bc2 <LL_RCC_PLL_GetMainSource>
 8001e98:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_OscConfig+0x218>
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d113      	bne.n	8001ece <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d110      	bne.n	8001ece <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eac:	f7ff fbf4 	bl	8001698 <LL_RCC_HSI_IsReady>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e270      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fbf8 	bl	80016bc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	e031      	b.n	8001f32 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed6:	f7ff fbc1 	bl	800165c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7fe fd91 	bl	8000a00 <HAL_GetTick>
 8001ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7fe fd8d 	bl	8000a00 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e257      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ef4:	f7ff fbd0 	bl	8001698 <LL_RCC_HSI_IsReady>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f1      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fbda 	bl	80016bc <LL_RCC_HSI_SetCalibTrimming>
 8001f08:	e013      	b.n	8001f32 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	f7ff fbb6 	bl	800167a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fd77 	bl	8000a00 <HAL_GetTick>
 8001f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe fd73 	bl	8000a00 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e23d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f28:	f7ff fbb6 	bl	8001698 <LL_RCC_HSI_IsReady>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f1      	bne.n	8001f16 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80a3 	beq.w	8002092 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d076      	beq.n	8002042 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d046      	beq.n	8001fee <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001f60:	f7ff fc6d 	bl	800183e <LL_RCC_LSI1_IsReady>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d113      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f6a:	f7ff fc46 	bl	80017fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f6e:	f7fe fd47 	bl	8000a00 <HAL_GetTick>
 8001f72:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f76:	f7fe fd43 	bl	8000a00 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e20d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f88:	f7ff fc59 	bl	800183e <LL_RCC_LSI1_IsReady>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f1      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f92:	f7ff fc66 	bl	8001862 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fd33 	bl	8000a00 <HAL_GetTick>
 8001f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f9e:	f7fe fd2f 	bl	8000a00 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1f9      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001fb0:	f7ff fc79 	bl	80018a6 <LL_RCC_LSI2_IsReady>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f1      	beq.n	8001f9e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc83 	bl	80018ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001fc4:	f7ff fc2a 	bl	800181c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fd1a 	bl	8000a00 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fd0:	f7fe fd16 	bl	8000a00 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1e0      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001fe2:	f7ff fc2c 	bl	800183e <LL_RCC_LSI1_IsReady>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f1      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x33c>
 8001fec:	e051      	b.n	8002092 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001fee:	f7ff fc04 	bl	80017fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fd05 	bl	8000a00 <HAL_GetTick>
 8001ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ffa:	f7fe fd01 	bl	8000a00 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1cb      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800200c:	f7ff fc17 	bl	800183e <LL_RCC_LSI1_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f1      	beq.n	8001ffa <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002016:	f7ff fc35 	bl	8001884 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800201a:	e00c      	b.n	8002036 <HAL_RCC_OscConfig+0x3a2>
 800201c:	20000004 	.word	0x20000004
 8002020:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002024:	f7fe fcec 	bl	8000a00 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1b6      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002036:	f7ff fc36 	bl	80018a6 <LL_RCC_LSI2_IsReady>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f1      	bne.n	8002024 <HAL_RCC_OscConfig+0x390>
 8002040:	e027      	b.n	8002092 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002042:	f7ff fc1f 	bl	8001884 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7fe fcdb 	bl	8000a00 <HAL_GetTick>
 800204a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800204e:	f7fe fcd7 	bl	8000a00 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1a1      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002060:	f7ff fc21 	bl	80018a6 <LL_RCC_LSI2_IsReady>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f1      	bne.n	800204e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800206a:	f7ff fbd7 	bl	800181c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fcc7 	bl	8000a00 <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002076:	f7fe fcc3 	bl	8000a00 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e18d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002088:	f7ff fbd9 	bl	800183e <LL_RCC_LSI1_IsReady>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f1      	bne.n	8002076 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05b      	beq.n	8002156 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	4bb5      	ldr	r3, [pc, #724]	; (8002374 <HAL_RCC_OscConfig+0x6e0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d114      	bne.n	80020d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80020aa:	f7ff fa77 	bl	800159c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fca7 	bl	8000a00 <HAL_GetTick>
 80020b2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7fe fca3 	bl	8000a00 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e16d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c8:	4baa      	ldr	r3, [pc, #680]	; (8002374 <HAL_RCC_OscConfig+0x6e0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0x44e>
 80020dc:	f7ff fb37 	bl	800174e <LL_RCC_LSE_Enable>
 80020e0:	e00c      	b.n	80020fc <HAL_RCC_OscConfig+0x468>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d104      	bne.n	80020f4 <HAL_RCC_OscConfig+0x460>
 80020ea:	f7ff fb52 	bl	8001792 <LL_RCC_LSE_EnableBypass>
 80020ee:	f7ff fb2e 	bl	800174e <LL_RCC_LSE_Enable>
 80020f2:	e003      	b.n	80020fc <HAL_RCC_OscConfig+0x468>
 80020f4:	f7ff fb3c 	bl	8001770 <LL_RCC_LSE_Disable>
 80020f8:	f7ff fb5c 	bl	80017b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d014      	beq.n	800212e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7fe fc7c 	bl	8000a00 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe fc78 	bl	8000a00 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e140      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002122:	f7ff fb58 	bl	80017d6 <LL_RCC_LSE_IsReady>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ef      	beq.n	800210c <HAL_RCC_OscConfig+0x478>
 800212c:	e013      	b.n	8002156 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fc67 	bl	8000a00 <HAL_GetTick>
 8002132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fc63 	bl	8000a00 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e12b      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800214c:	f7ff fb43 	bl	80017d6 <LL_RCC_LSE_IsReady>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d02c      	beq.n	80021bc <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d014      	beq.n	8002194 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800216a:	f7ff fabc 	bl	80016e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe fc47 	bl	8000a00 <HAL_GetTick>
 8002172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002176:	f7fe fc43 	bl	8000a00 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e10d      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002188:	f7ff facf 	bl	800172a <LL_RCC_HSI48_IsReady>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f1      	beq.n	8002176 <HAL_RCC_OscConfig+0x4e2>
 8002192:	e013      	b.n	80021bc <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002194:	f7ff fab8 	bl	8001708 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fc32 	bl	8000a00 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a0:	f7fe fc2e 	bl	8000a00 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0f8      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80021b2:	f7ff faba 	bl	800172a <LL_RCC_HSI48_IsReady>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f1      	bne.n	80021a0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80ee 	beq.w	80023a2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	f7ff fc18 	bl	80019fa <LL_RCC_GetSysClkSource>
 80021ca:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f040 80af 	bne.w	800233c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d123      	bne.n	8002234 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d114      	bne.n	8002234 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d10d      	bne.n	8002234 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d05d      	beq.n	80022f0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d058      	beq.n	80022ec <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0ab      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800224c:	f7ff fc73 	bl	8001b36 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002250:	f7fe fbd6 	bl	8000a00 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fbd2 	bl	8000a00 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e09c      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ef      	bne.n	8002258 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <HAL_RCC_OscConfig+0x6e4>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002290:	0212      	lsls	r2, r2, #8
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022a4:	430a      	orrs	r2, r1
 80022a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022ae:	f7ff fc33 	bl	8001b18 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c2:	f7fe fb9d 	bl	8000a00 <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fb99 	bl	8000a00 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e063      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ef      	beq.n	80022ca <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ea:	e05a      	b.n	80023a2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e059      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d151      	bne.n	80023a2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022fe:	f7ff fc0b 	bl	8001b18 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002312:	f7fe fb75 	bl	8000a00 <HAL_GetTick>
 8002316:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7fe fb71 	bl	8000a00 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03b      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ef      	beq.n	800231a <HAL_RCC_OscConfig+0x686>
 800233a:	e032      	b.n	80023a2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d02d      	beq.n	800239e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	f7ff fbf8 	bl	8001b36 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002350:	f023 0303 	bic.w	r3, r3, #3
 8002354:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002360:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fb49 	bl	8000a00 <HAL_GetTick>
 800236e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	e00d      	b.n	800238e <HAL_RCC_OscConfig+0x6fa>
 8002372:	bf00      	nop
 8002374:	58000400 	.word	0x58000400
 8002378:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fb40 	bl	8000a00 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ef      	bne.n	800237c <HAL_RCC_OscConfig+0x6e8>
 800239c:	e001      	b.n	80023a2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3734      	adds	r7, #52	; 0x34
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e12d      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b98      	ldr	r3, [pc, #608]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d91b      	bls.n	8002406 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b95      	ldr	r3, [pc, #596]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	4993      	ldr	r1, [pc, #588]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023de:	f7fe fb0f 	bl	8000a00 <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023e6:	f7fe fb0b 	bl	8000a00 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e111      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	4b8a      	ldr	r3, [pc, #552]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d1ef      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fafb 	bl	8001a12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800241c:	f7fe faf0 	bl	8000a00 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002424:	f7fe faec 	bl	8000a00 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0f2      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002436:	f7ff fbd0 	bl	8001bda <LL_RCC_IsActiveFlag_HPRE>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f1      	beq.n	8002424 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d016      	beq.n	800247a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff faf2 	bl	8001a3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002456:	f7fe fad3 	bl	8000a00 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800245e:	f7fe facf 	bl	8000a00 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0d5      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002470:	f7ff fbc5 	bl	8001bfe <LL_RCC_IsActiveFlag_C2HPRE>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f1      	beq.n	800245e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff faeb 	bl	8001a66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002490:	f7fe fab6 	bl	8000a00 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002498:	f7fe fab2 	bl	8000a00 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0b8      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024aa:	f7ff fbbb 	bl	8001c24 <LL_RCC_IsActiveFlag_SHDHPRE>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f1      	beq.n	8002498 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fae5 	bl	8001a94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fa99 	bl	8000a00 <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024d2:	f7fe fa95 	bl	8000a00 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e09b      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024e4:	f7ff fbb1 	bl	8001c4a <LL_RCC_IsActiveFlag_PPRE1>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f1      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d017      	beq.n	800252a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fadb 	bl	8001abc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002506:	f7fe fa7b 	bl	8000a00 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800250e:	f7fe fa77 	bl	8000a00 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e07d      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002520:	f7ff fba5 	bl	8001c6e <LL_RCC_IsActiveFlag_PPRE2>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f1      	beq.n	800250e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d043      	beq.n	80025be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d106      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800253e:	f7ff f87b 	bl	8001638 <LL_RCC_HSE_IsReady>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11e      	bne.n	8002586 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e067      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002554:	f7ff fafe 	bl	8001b54 <LL_RCC_PLL_IsReady>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d113      	bne.n	8002586 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e05c      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800256a:	f7ff f9e3 	bl	8001934 <LL_RCC_MSI_IsReady>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e051      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002578:	f7ff f88e 	bl	8001698 <LL_RCC_HSI_IsReady>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e04a      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fa21 	bl	80019d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fa36 	bl	8000a00 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	e00a      	b.n	80025ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002598:	f7fe fa32 	bl	8000a00 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e036      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	f7ff fa24 	bl	80019fa <LL_RCC_GetSysClkSource>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d1ec      	bne.n	8002598 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d21b      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 0207 	bic.w	r2, r3, #7
 80025d4:	4913      	ldr	r1, [pc, #76]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025dc:	f7fe fa10 	bl	8000a00 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025e4:	f7fe fa0c 	bl	8000a00 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e012      	b.n	800261c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_ClockConfig+0x278>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d1ef      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002604:	f000 f87e 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002608:	4603      	mov	r3, r0
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_RCC_ClockConfig+0x27c>)
 800260c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800260e:	f7fe fa03 	bl	8000a18 <HAL_GetTickPrio>
 8002612:	4603      	mov	r3, r0
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe f9a5 	bl	8000964 <HAL_InitTick>
 800261a:	4603      	mov	r3, r0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	58004000 	.word	0x58004000
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	f7ff f9e2 	bl	80019fa <LL_RCC_GetSysClkSource>
 8002636:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800263e:	f7ff f99e 	bl	800197e <LL_RCC_MSI_GetRange>
 8002642:	4603      	mov	r3, r0
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e04b      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d102      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800265a:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e045      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b08      	cmp	r3, #8
 8002664:	d10a      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002666:	f7fe ffb7 	bl	80015d8 <LL_RCC_HSE_IsEnabledDiv2>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e03a      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e037      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800267c:	f7ff faa1 	bl	8001bc2 <LL_RCC_PLL_GetMainSource>
 8002680:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x64>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d003      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x6a>
 800268e:	e00d      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002692:	60bb      	str	r3, [r7, #8]
        break;
 8002694:	e015      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002696:	f7fe ff9f 	bl	80015d8 <LL_RCC_HSE_IsEnabledDiv2>
 800269a:	4603      	mov	r3, r0
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80026a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026a4:	e00d      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026a8:	60bb      	str	r3, [r7, #8]
        break;
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026ac:	f7ff f967 	bl	800197e <LL_RCC_MSI_GetRange>
 80026b0:	4603      	mov	r3, r0
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	60bb      	str	r3, [r7, #8]
        break;
 80026c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80026c2:	f7ff fa59 	bl	8001b78 <LL_RCC_PLL_GetN>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	fb03 f402 	mul.w	r4, r3, r2
 80026ce:	f7ff fa6c 	bl	8001baa <LL_RCC_PLL_GetDivider>
 80026d2:	4603      	mov	r3, r0
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	3301      	adds	r3, #1
 80026d8:	fbb4 f4f3 	udiv	r4, r4, r3
 80026dc:	f7ff fa59 	bl	8001b92 <LL_RCC_PLL_GetR>
 80026e0:	4603      	mov	r3, r0
 80026e2:	0f5b      	lsrs	r3, r3, #29
 80026e4:	3301      	adds	r3, #1
 80026e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08003264 	.word	0x08003264
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	01e84800 	.word	0x01e84800

08002704 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b598      	push	{r3, r4, r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002708:	f7ff ff90 	bl	800262c <HAL_RCC_GetSysClockFreq>
 800270c:	4604      	mov	r4, r0
 800270e:	f7ff f9e9 	bl	8001ae4 <LL_RCC_GetAHBPrescaler>
 8002712:	4603      	mov	r3, r0
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4a03      	ldr	r2, [pc, #12]	; (8002728 <HAL_RCC_GetHCLKFreq+0x24>)
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd98      	pop	{r3, r4, r7, pc}
 8002728:	08003224 	.word	0x08003224

0800272c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2bb0      	cmp	r3, #176	; 0xb0
 8002738:	d903      	bls.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e007      	b.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	4a11      	ldr	r2, [pc, #68]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002752:	f7ff f9d3 	bl	8001afc <LL_RCC_GetAHB4Prescaler>
 8002756:	4603      	mov	r3, r0
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	0c9c      	lsrs	r4, r3, #18
 8002776:	f7fe ff21 	bl	80015bc <HAL_PWREx_GetVoltageRange>
 800277a:	4603      	mov	r3, r0
 800277c:	4619      	mov	r1, r3
 800277e:	4620      	mov	r0, r4
 8002780:	f000 f80c 	bl	800279c <RCC_SetFlashLatency>
 8002784:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}
 800278e:	bf00      	nop
 8002790:	08003264 	.word	0x08003264
 8002794:	08003224 	.word	0x08003224
 8002798:	431bde83 	.word	0x431bde83

0800279c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b093      	sub	sp, #76	; 0x4c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <RCC_SetFlashLatency+0xf0>)
 80027a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80027b2:	4a37      	ldr	r2, [pc, #220]	; (8002890 <RCC_SetFlashLatency+0xf4>)
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027be:	4b35      	ldr	r3, [pc, #212]	; (8002894 <RCC_SetFlashLatency+0xf8>)
 80027c0:	f107 040c 	add.w	r4, r7, #12
 80027c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027ca:	2300      	movs	r3, #0
 80027cc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d4:	d11c      	bne.n	8002810 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
 80027da:	e015      	b.n	8002808 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027e4:	4413      	add	r3, r2
 80027e6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d808      	bhi.n	8002802 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027f8:	4413      	add	r3, r2
 80027fa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027fe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002800:	e022      	b.n	8002848 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002804:	3301      	adds	r3, #1
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	2b03      	cmp	r3, #3
 800280c:	d9e6      	bls.n	80027dc <RCC_SetFlashLatency+0x40>
 800280e:	e01b      	b.n	8002848 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002810:	2300      	movs	r3, #0
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002814:	e015      	b.n	8002842 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800281e:	4413      	add	r3, r2
 8002820:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	d808      	bhi.n	800283c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800282a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002832:	4413      	add	r3, r2
 8002834:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800283a:	e005      	b.n	8002848 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283e:	3301      	adds	r3, #1
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002844:	2b02      	cmp	r3, #2
 8002846:	d9e6      	bls.n	8002816 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <RCC_SetFlashLatency+0xfc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 0207 	bic.w	r2, r3, #7
 8002850:	4911      	ldr	r1, [pc, #68]	; (8002898 <RCC_SetFlashLatency+0xfc>)
 8002852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002858:	f7fe f8d2 	bl	8000a00 <HAL_GetTick>
 800285c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800285e:	e008      	b.n	8002872 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002860:	f7fe f8ce 	bl	8000a00 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e007      	b.n	8002882 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <RCC_SetFlashLatency+0xfc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800287c:	429a      	cmp	r2, r3
 800287e:	d1ef      	bne.n	8002860 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	374c      	adds	r7, #76	; 0x4c
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	080031f8 	.word	0x080031f8
 8002890:	08003208 	.word	0x08003208
 8002894:	08003214 	.word	0x08003214
 8002898:	58004000 	.word	0x58004000

0800289c <LL_RCC_LSE_IsEnabled>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <LL_RCC_LSE_IsEnabled+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_RCC_LSE_IsEnabled+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_LSE_IsReady>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d101      	bne.n	80028d8 <LL_RCC_LSE_IsReady+0x18>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <LL_RCC_LSE_IsReady+0x1a>
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_RCC_MSI_EnablePLLMode>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_RCC_SetRFWKPClockSource>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_SetSMPSClockSource>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f023 0203 	bic.w	r2, r3, #3
 8002940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4313      	orrs	r3, r2
 8002948:	624b      	str	r3, [r1, #36]	; 0x24
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_SetSMPSPrescaler>:
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4313      	orrs	r3, r2
 8002970:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_RCC_SetUSARTClockSource>:
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_RCC_SetLPUARTClockSource>:
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_RCC_SetI2CClockSource>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_SetLPTIMClockSource>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_SetSAIClockSource>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_SetRNGClockSource>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_RCC_SetCLK48ClockSource>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_SetUSBClockSource>:
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe3 	bl	8002a9c <LL_RCC_SetCLK48ClockSource>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <LL_RCC_SetADCClockSource>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_RCC_SetRTCClockSource>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_RCC_GetRTCClockSource>:
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_ForceBackupDomainReset>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_PLLSAI1_Enable>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_PLLSAI1_Disable>:
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bc4:	6013      	str	r3, [r2, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_PLLSAI1_IsReady>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be2:	d101      	bne.n	8002be8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c00:	2300      	movs	r3, #0
 8002c02:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d034      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c18:	d021      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002c1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c1e:	d81b      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c24:	d01d      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c2a:	d815      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c34:	d110      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c46:	e00d      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f94d 	bl	8002eec <RCCEx_PLLSAI1_ConfigNP>
 8002c52:	4603      	mov	r3, r0
 8002c54:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	77fb      	strb	r3, [r7, #31]
        break;
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c64:	7ffb      	ldrb	r3, [r7, #31]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fee8 	bl	8002a44 <LL_RCC_SetSAIClockSource>
 8002c74:	e001      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d046      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c86:	f7ff ff56 	bl	8002b36 <LL_RCC_GetRTCClockSource>
 8002c8a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d03c      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c96:	f7fe fc81 	bl	800159c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff30 	bl	8002b0a <LL_RCC_SetRTCClockSource>
 8002caa:	e02e      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002cb6:	f7ff ff4b 	bl	8002b50 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002cba:	f7ff ff5a 	bl	8002b72 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002cd6:	f7ff fde1 	bl	800289c <LL_RCC_LSE_IsEnabled>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d114      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce0:	f7fd fe8e 	bl	8000a00 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fd fe8a 	bl	8000a00 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	77fb      	strb	r3, [r7, #31]
              break;
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d00:	f7ff fdde 	bl	80028c0 <LL_RCC_LSE_IsReady>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	77bb      	strb	r3, [r7, #30]
 8002d0e:	e001      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fe2a 	bl	800297e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fe35 	bl	80029aa <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fe5d 	bl	8002a10 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fe52 	bl	8002a10 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d004      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fe2a 	bl	80029d6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe1f 	bl	80029d6 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d022      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fe8d 	bl	8002ac8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd0:	d10b      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8e3 	bl	8002fa2 <RCCEx_PLLSAI1_ConfigNQ>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e08:	d003      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fe2a 	bl	8002a70 <LL_RCC_SetRNGClockSource>
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff fe21 	bl	8002a70 <LL_RCC_SetRNGClockSource>
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fe34 	bl	8002a9c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d022      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe3d 	bl	8002ade <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f8e3 	bl	8003058 <RCCEx_PLLSAI1_ConfigNR>
 8002e92:	4603      	mov	r3, r0
 8002e94:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002e96:	7ffb      	ldrb	r3, [r7, #31]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
 8002e9e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fd26 	bl	8002902 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fd45 	bl	8002956 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fd2c 	bl	800292e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002ed6:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002ee4:	f7ff fcfe 	bl	80028e4 <LL_RCC_MSI_EnablePLLMode>
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ef8:	f7ff fe5b 	bl	8002bb2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002efc:	f7fd fd80 	bl	8000a00 <HAL_GetTick>
 8002f00:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f02:	e009      	b.n	8002f18 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f04:	f7fd fd7c 	bl	8000a00 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d902      	bls.n	8002f18 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	73fb      	strb	r3, [r7, #15]
      break;
 8002f16:	e004      	b.n	8002f22 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f18:	f7ff fe5a 	bl	8002bd0 <LL_RCC_PLLSAI1_IsReady>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d137      	bne.n	8002f98 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	4313      	orrs	r3, r2
 8002f54:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f56:	f7ff fe1d 	bl	8002b94 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5a:	f7fd fd51 	bl	8000a00 <HAL_GetTick>
 8002f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f60:	e009      	b.n	8002f76 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f62:	f7fd fd4d 	bl	8000a00 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d902      	bls.n	8002f76 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	73fb      	strb	r3, [r7, #15]
        break;
 8002f74:	e004      	b.n	8002f80 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f76:	f7ff fe2b 	bl	8002bd0 <LL_RCC_PLLSAI1_IsReady>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d1f0      	bne.n	8002f62 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f94:	4313      	orrs	r3, r2
 8002f96:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fae:	f7ff fe00 	bl	8002bb2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fb2:	f7fd fd25 	bl	8000a00 <HAL_GetTick>
 8002fb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fb8:	e009      	b.n	8002fce <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fba:	f7fd fd21 	bl	8000a00 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d902      	bls.n	8002fce <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e004      	b.n	8002fd8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fce:	f7ff fdff 	bl	8002bd0 <LL_RCC_PLLSAI1_IsReady>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d137      	bne.n	800304e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003008:	4313      	orrs	r3, r2
 800300a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800300c:	f7ff fdc2 	bl	8002b94 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003010:	f7fd fcf6 	bl	8000a00 <HAL_GetTick>
 8003014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003016:	e009      	b.n	800302c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003018:	f7fd fcf2 	bl	8000a00 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d902      	bls.n	800302c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	73fb      	strb	r3, [r7, #15]
        break;
 800302a:	e004      	b.n	8003036 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800302c:	f7ff fdd0 	bl	8002bd0 <LL_RCC_PLLSAI1_IsReady>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d1f0      	bne.n	8003018 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800304a:	4313      	orrs	r3, r2
 800304c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003064:	f7ff fda5 	bl	8002bb2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003068:	f7fd fcca 	bl	8000a00 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003070:	f7fd fcc6 	bl	8000a00 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
      break;
 8003082:	e004      	b.n	800308e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003084:	f7ff fda4 	bl	8002bd0 <LL_RCC_PLLSAI1_IsReady>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d137      	bne.n	8003104 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a8:	4313      	orrs	r3, r2
 80030aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	4313      	orrs	r3, r2
 80030c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030c2:	f7ff fd67 	bl	8002b94 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c6:	f7fd fc9b 	bl	8000a00 <HAL_GetTick>
 80030ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030cc:	e009      	b.n	80030e2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ce:	f7fd fc97 	bl	8000a00 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	73fb      	strb	r3, [r7, #15]
        break;
 80030e0:	e004      	b.n	80030ec <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030e2:	f7ff fd75 	bl	8002bd0 <LL_RCC_PLLSAI1_IsReady>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d1f0      	bne.n	80030ce <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003100:	4313      	orrs	r3, r2
 8003102:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003116:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800311a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	b29b      	uxth	r3, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	4013      	ands	r3, r2
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003144:	b084      	sub	sp, #16
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	f107 0014 	add.w	r0, r7, #20
 8003152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	b004      	add	sp, #16
 8003184:	4770      	bx	lr
	...

08003188 <__libc_init_array>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4d0d      	ldr	r5, [pc, #52]	; (80031c0 <__libc_init_array+0x38>)
 800318c:	4c0d      	ldr	r4, [pc, #52]	; (80031c4 <__libc_init_array+0x3c>)
 800318e:	1b64      	subs	r4, r4, r5
 8003190:	10a4      	asrs	r4, r4, #2
 8003192:	2600      	movs	r6, #0
 8003194:	42a6      	cmp	r6, r4
 8003196:	d109      	bne.n	80031ac <__libc_init_array+0x24>
 8003198:	4d0b      	ldr	r5, [pc, #44]	; (80031c8 <__libc_init_array+0x40>)
 800319a:	4c0c      	ldr	r4, [pc, #48]	; (80031cc <__libc_init_array+0x44>)
 800319c:	f000 f820 	bl	80031e0 <_init>
 80031a0:	1b64      	subs	r4, r4, r5
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	2600      	movs	r6, #0
 80031a6:	42a6      	cmp	r6, r4
 80031a8:	d105      	bne.n	80031b6 <__libc_init_array+0x2e>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b0:	4798      	blx	r3
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7ee      	b.n	8003194 <__libc_init_array+0xc>
 80031b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ba:	4798      	blx	r3
 80031bc:	3601      	adds	r6, #1
 80031be:	e7f2      	b.n	80031a6 <__libc_init_array+0x1e>
 80031c0:	080032a4 	.word	0x080032a4
 80031c4:	080032a4 	.word	0x080032a4
 80031c8:	080032a4 	.word	0x080032a4
 80031cc:	080032a8 	.word	0x080032a8

080031d0 <memset>:
 80031d0:	4402      	add	r2, r0
 80031d2:	4603      	mov	r3, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <memset+0xa>
 80031d8:	4770      	bx	lr
 80031da:	f803 1b01 	strb.w	r1, [r3], #1
 80031de:	e7f9      	b.n	80031d4 <memset+0x4>

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
